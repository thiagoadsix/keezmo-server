---
description: 
globs: 
alwaysApply: true
---

# Keezmo Project Cursor Rules

This document outlines the guidelines for organizing and writing code within the Keezmo project. Keezmo follows Clean Architecture principles to ensure clear separation of concerns, high testability, and framework independence. Please adhere to the instructions below when adding or modifying code.

## Project Directory Structure

The Keezmo repository follows a structured layout:

```
src/
├── domain/
│   ├── entities/
│   ├── value-objects/
│   ├── interfaces/
│   ├── services/
│   └── use-cases/
├── shared/
│   ├── utils/
│   └── constants/
```

- **src/domain/**:\
  Contains all domain-specific modules:

  - **entities/**: Domain models that encapsulate business logic (e.g., the `User` entity).
  - **value-objects/**: Definitions for objects that represent values with validation logic (e.g., `Email`).
  - **interfaces/**: Abstractions for repositories and any other domain contracts.
  - **services/** and **use-cases/**: Application-specific business rules and orchestrations.

- **src/shared/**:\
  Holds shared utilities and constants that can be reused across domains. For example, functions like `generateId` can be placed within `src/shared/utils/`.

## Coding and File Organization Guidelines

### Clean Architecture Principles

- **Domain Integrity**:\
  All domain models must encapsulate their validation rules internally. For instance, a `User` entity should verify that provided attributes (like the name or email) are valid. When a validation fails, throw a domain-specific error that extends a common base error (`DomainError`).

- **Separation of Concerns**:

  - Business logic resides in the **domain** layer.
  - Shared functions (e.g., unique ID generation) should be implemented in **shared/utils/**.
  - Avoid mixing UI, infrastructure, or framework-specific code with domain logic.

### Consistent Import Paths

- Always use relative import paths that mirror the directory structure.\
  **Example:**
  ```ts
  import { Email } from '../value-objects/email';
  ```
  This practice clarifies module boundaries and maintains consistency across the codebase.

### Modular Code Design

- **Domain Modules**:\
  Each domain-specific piece of logic should be isolated. For example, the `User` entity might be implemented as follows:

  ```ts
  // src/domain/entities/user.ts
  import { Email } from '../value-objects/email';
  import { InvalidNameError } from '../errors/invalid-name-error';
  import { generateId } from '../../shared/utils/generateId'; // Ensure generateId is placed in shared/utils

  interface UserProps {
    name: string;
    email: Email;
  }

  export class User {
    public readonly id: string;
    public name: string;
    public email: Email;

    constructor(props: UserProps) {
      if (props.name.trim().length === 0) {
        throw new InvalidNameError(props.name);
      }

      this.id = generateId();
      this.name = props.name;
      this.email = props.email;
    }

    public updateName(newName: string): void {
      if (newName.trim().length === 0) {
        throw new InvalidNameError(newName);
      }
      this.name = newName;
    }
  }
  ```

- **Value Objects**:\
  Encapsulate specific validations and behaviors. A sample `Email` value object may look like:

  ```ts
  // src/domain/value-objects/email.ts
  import { InvalidEmailError } from '../errors/invalid-email-error';

  export class Email {
    private readonly value: string;

    constructor(email: string) {
      const regex = /^[\w\.-]+@([\w\-]+\.)+[\w\-]{2,4}$/;
      if (!regex.test(email)) {
        throw new InvalidEmailError(email);
      }
      this.value = email;
    }

    public getValue(): string {
      return this.value;
    }
  }
  ```

- **Domain Interfaces & Errors**:\
  Define interfaces and error handling in the domain layer.

  - **Repository Interface Example**:
    ```ts
    // src/domain/interfaces/user-repository.ts
    import { User } from '../entities/user';

    export interface UserRepository {
      findById(id: string): Promise<User | null>;
      save(user: User): Promise<void>;
      delete(id: string): Promise<void>;
    }
    ```
  - **Error Hierarchy Example**:
    ```ts
    // src/domain/errors/domain-error.ts
    export abstract class DomainError extends Error {
      constructor(message: string) {
        super(message);
        this.name = 'DomainError';
      }
    }
    ```
    ```ts
    // src/domain/errors/invalid-email-error.ts
    import { DomainError } from './domain-error';

    export class InvalidEmailError extends DomainError {
      constructor(email: string) {
        super(`The email "${email}" is invalid.`);
        this.name = 'InvalidEmailError';
      }
    }
    ```
    ```ts
    // src/domain/errors/invalid-name-error.ts
    import { DomainError } from './domain-error';

    export class InvalidNameError extends DomainError {
      constructor(name: string) {
        super(`The name "${name}" is invalid.`);
        this.name = 'InvalidNameError';
      }
    }
    ```

## Additional Practices

- **Documentation & Comments**:\
  Comment your code where necessary to explain business logic, especially within domain models and value objects.

- **Referencing Files**:\
  You are encouraged to reference files using the `@` notation if needed. For example, referencing a utility file can be done as:\
  `@src/shared/utils/generateId.ts`

- **Markdown Usage**:\
  You may use markdown formatting in your commit messages, code comments, or documentation, but it is not mandatory.

---

By following these guidelines, you ensure that the Keezmo project remains robust, maintainable, and scalable. Always refer back to this document for any doubts regarding file organization or code practices, and modify your approach according to this structure.

- You can use the `@` notation to reference files in your commit messages or code comments.
- You can use markdown to organize your documentation or in-code comments, but it is optional.

Happy coding!

